import os
import re
import sys
import requests
from fpdf import FPDF
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
from PyQt6.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QTextEdit, QPushButton, QFileDialog, QMessageBox


class MainWindow(QWidget):
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setWindowTitle('Malware Scanner')
        self.setFixedSize(400, 400)
        
        # Set font for labels
        font = QFont()
        font.setPointSize(10)
        
        # Create widgets
        self.url_label = QLabel('Enter URL:', self)
        self.url_label.move(20, 20)
        self.url_label.setFont(font)
        
        self.url_edit = QLineEdit(self)
        self.url_edit.move(110, 20)
        self.url_edit.resize(250, 20)
        
        self.file_label = QLabel('Upload file:', self)
        self.file_label.move(20, 50)
        self.file_label.setFont(font)
        
        self.file_edit = QLineEdit(self)
        self.file_edit.move(110, 50)
        self.file_edit.resize(200, 20)
        self.file_edit.setReadOnly(True)
        
        self.browse_button = QPushButton('Browse', self)
        self.browse_button.move(320, 50)
        self.browse_button.clicked.connect(self.browse_file)
        
        self.scan_button = QPushButton('Scan', self)
        self.scan_button.move(20, 100)
        self.scan_button.clicked.connect(self.scan_)
        
        self.clear_button = QPushButton('Clear', self)
        self.clear_button.move(120, 100)
        self.clear_button.clicked.connect(self.clear)
        
        self.export_button = QPushButton('Export to PDF', self)
        self.export_button.move(220, 100)
        self.export_button.clicked.connect(self.export_to_pdf)
        
        self.result_label = QLabel('Result:', self)
        self.result_label.move(20, 150)
        self.result_label.setFont(font)
        
        self.result_edit = QTextEdit(self)
        self.result_edit.move(20, 180)
        self.result_edit.resize(360, 200)
        self.result_edit.setReadOnly(True)
        
        self.show()
    
    # Open file dialog to browse for file to upload.
    def browse_file(self):
        current_dir = os.getcwd()
        file_path, _ = QFileDialog.getOpenFileName(self, 'Open file', current_dir, 'All files (*.*)')
        if file_path:
            self.file_edit.setText(file_path)
        self.url_edit.clear()
    
    # Scan the file or URL.
    def scan_file_url(self):
        api_key = 'e8cf03a48915da2f70adfb45ae906ce940e837c47ba572bb30a8f1b8573df8e8'
        # malicous_sites = ["https://trycracksetup.com", "https://www.cracksetup.com", "https://idmcrackeys.com"]
        
        # Define the pattern to match the URL or file 
        url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
        file_pattern = re.compile(r'^[A-Za-z]:|^(\/[A-Za-z0-9_]+)+\/?$')
        
        input = self.filename_edit.text()
        print(input)
        
        if url_pattern.match(input):
            #print('URL')
            print(f"URL, scanning...")
            # scan url
            url = 'https://www.virustotal.com/vtapi/v2/url/scan'
            params = {'apikey': api_key, 'url': url}
            response = requests.post(url, data=params)
            date = response.json().get("scan_date")
            print(f"Date: {date}")
            
            #get report after scaned form url
            url = 'https://www.virustotal.com/vtapi/v2/url/report'
            params = {'apikey': api_key, 'resource': self.filename_edit.text()}  # url
            response = requests.get(url, params=params)
            #print(response.json())
            
            for i in response.json().get("scans"):
                print(f"Name: {i} - {response.json().get('scans').get(i).get('detected')} \t | \t Result:{response.json().get('scans').get(i).get('result')}")
            
            print(f"Scan ID: {response.json().get('scan_id')} Success........")
        elif file_pattern.match(input):
            #print('File')
            try:
                print(f"File, scanning...")
                url = 'https://www.virustotal.com/vtapi/v2/file/scan'
                params = {'apikey': api_key}
                files = {'file': (input, open(input, 'rb'))}
                response = requests.post(url, files=files, params=params)
                resource = response.json().get("resource")
                print(f"Resource: {resource}")
                # get report from file scaned
                url = 'https://www.virustotal.com/vtapi/v2/file/report'
                params = {'apikey': api_key, 'resource': resource}
                response = requests.get(url, params=params)
                #print(response.json().get("scans"))
                
                for i in response.json().get("scans"):
                    print(f"Name: {i} - {response.json().get('scans').get(i).get('detected')} \t | \t Result: - {response.json().get('scans').get(i).get('result')}")
                    
                print(f"Scan ID: {response.json().get('scan_id')} Success........")
            except:
                print("Invalid input")
        else:
            print('Invalid input')
            
    # Clear the URL and file upload fields and the result text edit
    def clear(self):
        """Clear the URL and file upload fields and the result text edit."""
        self.url_edit.clear()
        self.file_edit.clear()
        self.result_edit.clear()
    
    # Export the result text edit contents to a PDF file  
    def export_to_pdf(self):
        """Export the result text edit contents to a PDF file."""
        file_path, _ = QFileDialog.getSaveFileName(self, 'Save file', '', 'PDF files (*.pdf)')
        if file_path:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(40, 10, 'Scan Result')
            pdf.ln()
            pdf.set_font('Arial', '', 12)
            for line in self.result_edit.toPlainText().split('\n'):
                pdf.cell(0, 10, line)
                pdf.ln()
            pdf.output(file_path, 'F')
            QMessageBox.information(self, 'Export', f'File exported to {file_path}')


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec()) 
